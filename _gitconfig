[alias]
	ci = commit
	br = branch
	l = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
	cf = config

	a = add
	ap = add -p
	c = commit --verbose
	ca = commit -a --verbose
	cm = commit -m
	cam = commit -a -m
	m = commit --amend --verbose

	d = difftool
	ds = diff --stat
	dc = diff --cached

	s = status -s
	co = checkout
	cob = checkout -b

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’`
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d; git remote -v update -p"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

[user]
	name = Joshua Adams
	email = n7down@gmail.com

[merge]
	tool = vimdiff
	conflictstyle = diff3

[mergetool]
	prompt = false

[diff]
	tool = vimdiff

[difftool]
	prompt = false
